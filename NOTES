
TODO

  - code cleanup

  - move everything to agda-prelude

    What to do about Data.Nat.Lemmas? Better name?

NEW FEATURES

  - using assumptions

    could work if they have the form "atom ≡ exp"

    although in that case it might be nicer with a general rewrite tactic

    Target example: get sumSquare example working in one call.

  - a light-weight approach to assumptions: handle function types in simplify,
    simplifying both assumptions and goal

    that would require completeness proofs for simplification.

    It works! (Just have to prove completeness...) Can now get sumSquare with
    one call.

    There should be a version that puts the 'id' in --> assumed.

  - cong tactic

    Idea: traverse atoms and normalise any nat terms inside them

    This is actually whay simpl should do.
    Traverse the goal and rewrite any natural number terms it can find and
    stitch things up with congruence. Maybe slightly tricky: terms are layered.

    Also tricky: can't represent contexts in a well-typed way, so the
    congruence calls need to appear in the unquoted term. Actually they would be
    calls to subst.

    What should the expression representation be?

      - Vars in Exps stand for actual terms
      - Terms can contain exps

    First attempt:

      data CExp : Set where
        atom : Term → CExp
        cxt  : Term → List (Exp × List CExp) → CExp
          -- cxt (λ x₁ .. xm → C[x₁..xm])
          --     [ ei[y₁..yn] , [y₁↦c₁..yn↦cn] ]i

    Actually, this isn't quite a generalization of simpl. Simpl does
    cancellation of equations which cong wouldn't do. So I guess it needs to be
    a separate tactic. Possibly it could do both... but lets do just cong
    first. I guess this should really be called simpl and simpl should be
    cancel.

  - Using a + b ≡ 0 -> a ≡ 0.

  - Dealing with minus.

    Tricky! Needs care with underflow.

  - rewrite tactic

    How would it get the type of the equation to rewrite by? Could do an
    identity function trick and grab the hidden argument.

  - Look at "Proving Equalities in a Commutative Ring Done Right in Coq"
    by Grégoire and Mahboubi. Also read up on Coq tactics in general.

  - Think about regeneralize to other types.

  - Induction tactic.

  - List tactic

  - Combined List and Nat tactic. In the cancel proof there are lots of
    opportunities for reasoning about sum and product.

  - Inequality tactics (for nat)

-- agda-prelude -----------------------------------------------------------

-- Tactic.Reflection library --

  - Substitutions

  - Tactic.Reflection.WellScoped

  - Rename DeBruijn module

  - Pretty printing

-- Deriving --

  - What to do about unnamed record constructors? No syntax for unquoting
    record expressions. Work-around: name record constructors. This shouldn't
    be an issue. Just need to make sure constructorOf works for records.
    Actually it doesn't, and maybe it shouldn't. There should be another one to
    get the constructor of a record.

  - Currently conflating implicit and index/param. The problem: don't know what
    the parameters are. Probably should add that to data type definitions.

  - Mapping TypeHeads to equality functions. Need more than the head. For
    things like List D I need to specialise list equality to D to get through
    the termination checker.

  - Use a monad to handle errors. Run the monad at the top-level and generate a
    suitable def to trigger a nice error message.

  - Figure out which cases are needed for indexed data. Currently Vec fails
    since I'm generating the nil-cons cases.

  - Performance. Seems it's pretty printing that takes time! C-c C-n on
    derivingEq is 2.4s, but adding an unquoteDecl on it hardly affects the time
    at all.

-- Name space structure --

  I'm not too fond of Control.WellFounded, but I'm not sure where it fits
  better.

  Were to put deriving functions? Tactic.* ?

  Data.Reflect.* needs better name. Maybe that's where deriving functions go as
  well?

  The big question is what the top-level names should be. In stdlib:
    Algebra
    Category
    Data
    Foreign
    Function
    IO
    Induction
    Relation
  From Haskell
    Control
    System
    Text
    Test
    Debug
  In agda-prelude and agda-tactics
    Prelude
    Builtin
    Tactic
  Other ideas
    Reflection

  Maybe Data.Reflect isn't so bad. Or Data.Reflection.

